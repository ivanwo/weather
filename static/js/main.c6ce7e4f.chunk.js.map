{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","props","id","weather","periods","detailedForecast","src","icon","App","useState","weatherData","setWeatherData","setInitialWeather","city","setCity","sayLocation","location","console","log","coords","latitude","longitude","fetchWeather","locationError","error","alert","a","url","toFixed","fetch","then","response","json","initialWeather","properties","relativeLocation","fetchPreciseWeather","forecast","data","className","href","onClick","_","navigator","geolocation","getCurrentPosition","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAGA,SAASA,EAAYC,GACnB,OACE,qCACE,qBAAKC,GAAG,eAAR,SAAwBD,EAAME,QAAQC,QAAQ,GAAGC,mBACjD,qBAAKC,IAAKL,EAAME,QAAQC,QAAQ,GAAGG,UAoD1BC,MA/Cf,WAAgB,IAAD,EACuBC,mBAAS,MADhC,mBACRC,EADQ,KACKC,EADL,OAE6BF,mBAAS,IAFtC,mBAEQG,GAFR,aAGSH,mBAAS,aAHlB,mBAGRI,EAHQ,KAGFC,EAHE,KAOTC,EAAc,SAAAC,GAChBC,QAAQC,IAAR,uBAA4BF,EAASG,OAAOC,SAA5C,YAAwDJ,EAASG,OAAOE,YACxEC,EAAaN,IAEXO,EAAgB,SAAAC,GAAK,OACvBC,MAAM,YAAD,OAAaD,KAChBF,EAAY,uCAAG,WAAMH,GAAN,eAAAO,EAAA,6DACbC,EADa,yCAC2BR,EAAOA,OAAOC,SAASQ,QAAQ,GAD1D,YACgET,EAAOA,OAAOE,UAAUO,QAAQ,IADhG,SAESC,MAAMF,GAC7BG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJrB,EAAkBqB,GAClBnB,EAAQmB,EAAeC,WAAWC,iBAAiBD,WAAWrB,MAC9DuB,EAAoBH,EAAeC,WAAWG,aAPjC,yDAAH,sDAUZD,EAAmB,uCAAG,WAAMT,GAAN,SAAAD,EAAA,sEACIG,MAAMF,GAC7BG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAQ,GACJ3B,EAAe2B,EAAKJ,YACpBjB,QAAQC,IAAIoB,EAAKJ,eALC,yDAAH,sDASvB,OACE,mCACE,yBAAQK,UAAU,aAAlB,UACE,mBAAGC,KAAK,GAAR,SACE,2CAEF,wBAAQC,QAjCI,SAAAC,GAAC,OACjBC,UAAUC,YAAYC,mBAAmB9B,EAAaQ,IAgClD,6BACA,2DAA6B,4BAAIV,OAChB,MAAfH,EAAsB,cAACV,EAAD,CAAaG,QAASO,IAAgB,mCCxCvDoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c6ce7e4f.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\n\nfunction WeatherCard(props){\n  return(\n    <>\n      <div id=\"forecast-box\">{props.weather.periods[0].detailedForecast}</div>\n      <img src={props.weather.periods[0].icon}/>\n    </>\n  );\n}\n\nfunction App() {\n  let [weatherData, setWeatherData] = useState(null);\n  let [initialWeather, setInitialWeather] = useState({});\n  let [city, setCity] = useState(\"anonymous\");\n\n  let getLocation = _ => \n    navigator.geolocation.getCurrentPosition(sayLocation, locationError);\n  let sayLocation = location =>  {\n    console.log(`i see you at ${location.coords.latitude} ${location.coords.longitude}`);\n    fetchWeather(location);\n  }\n  let locationError = error => \n    alert(`Problem! ${error}`);\n  let fetchWeather = async coords => {\n    let url = `https://api.weather.gov/points/${coords.coords.latitude.toFixed(3)},${coords.coords.longitude.toFixed(3)}`;\n    const weatherCall = await fetch(url)\n      .then(response => response.json())\n      .then(initialWeather => {\n        setInitialWeather(initialWeather);\n        setCity(initialWeather.properties.relativeLocation.properties.city);\n        fetchPreciseWeather(initialWeather.properties.forecast);\n    });\n  }\n  let fetchPreciseWeather = async url => {\n      const weatherCall = await fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setWeatherData(data.properties);\n          console.log(data.properties);\n        })\n  }\n\n  return (\n    <>\n      <header className=\"App-header\">\n        <a href=\"\">\n          <h1>Weather</h1>\n        </a>\n        <button onClick={getLocation}>locate me daddy</button>\n        <h2>Currently weatherin' out <i>{city}</i></h2>\n        {(weatherData != null ? <WeatherCard weather={weatherData}/>: <></>)\n        }\n      </header>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}